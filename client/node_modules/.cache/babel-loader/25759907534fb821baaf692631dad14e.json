{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nvar Utils = _interopRequireWildcard(require(\"./utils\"));\n\nfunction _getRequireWildcardCache() {\n  if (typeof WeakMap !== \"function\") return null;\n  var cache = new WeakMap();\n\n  _getRequireWildcardCache = function _getRequireWildcardCache() {\n    return cache;\n  };\n\n  return cache;\n}\n\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  }\n\n  var cache = _getRequireWildcardCache();\n\n  if (cache && cache.has(obj)) {\n    return cache.get(obj);\n  }\n\n  var newObj = {};\n\n  if (obj != null) {\n    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n\n    for (var key in obj) {\n      if (Object.prototype.hasOwnProperty.call(obj, key)) {\n        var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n\n        if (desc && (desc.get || desc.set)) {\n          Object.defineProperty(newObj, key, desc);\n        } else {\n          newObj[key] = obj[key];\n        }\n      }\n    }\n  }\n\n  newObj[\"default\"] = obj;\n\n  if (cache) {\n    cache.set(obj, newObj);\n  }\n\n  return newObj;\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nvar VanillaSwipe =\n/*#__PURE__*/\nfunction () {\n  function VanillaSwipe(props) {\n    _classCallCheck(this, VanillaSwipe);\n\n    _defineProperty(this, \"state\", void 0);\n\n    _defineProperty(this, \"props\", void 0);\n\n    this.state = Utils.getInitialState();\n    this.props = Utils.getInitialProps(props);\n    this.handleSwipeStart = this.handleSwipeStart.bind(this);\n    this.handleSwipeMove = this.handleSwipeMove.bind(this);\n    this.handleSwipeEnd = this.handleSwipeEnd.bind(this);\n    this.handleMouseDown = this.handleMouseDown.bind(this);\n    this.handleMouseMove = this.handleMouseMove.bind(this);\n    this.handleMouseUp = this.handleMouseUp.bind(this);\n    this.handleMouseLeave = this.handleMouseLeave.bind(this);\n  }\n\n  _createClass(VanillaSwipe, [{\n    key: \"init\",\n    value: function init() {\n      this.setupTouchListeners();\n      this.setupMouseListeners();\n    }\n  }, {\n    key: \"update\",\n    value: function update(props) {\n      var prevProps = this.props;\n      var nextProps = Object.assign({}, prevProps, props);\n\n      if (prevProps.element !== nextProps.element) {\n        this.destroy();\n        this.props = nextProps;\n        this.init();\n        return;\n      }\n\n      this.props = nextProps;\n\n      if (prevProps.mouseTrackingEnabled !== nextProps.mouseTrackingEnabled) {\n        nextProps.mouseTrackingEnabled ? this.setupMouseListeners() : this.cleanupMouseListeners();\n      }\n\n      if (prevProps.touchTrackingEnabled !== nextProps.touchTrackingEnabled) {\n        nextProps.touchTrackingEnabled ? this.setupTouchListeners() : this.cleanupTouchListeners();\n      }\n    }\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      this.cleanupMouseListeners();\n      this.cleanupTouchListeners();\n      this.state = Utils.getInitialState();\n      this.props = Utils.getInitialProps();\n    }\n  }, {\n    key: \"setupTouchListeners\",\n    value: function setupTouchListeners() {\n      var _this$props = this.props,\n          element = _this$props.element,\n          touchTrackingEnabled = _this$props.touchTrackingEnabled;\n\n      if (element && touchTrackingEnabled) {\n        var isPassiveSupported = Utils.checkIsPassiveSupported();\n        var options = Utils.getOptions(isPassiveSupported);\n        element.addEventListener('touchstart', this.handleSwipeStart, options);\n        element.addEventListener('touchmove', this.handleSwipeMove, options);\n        element.addEventListener('touchend', this.handleSwipeEnd, options);\n      }\n    }\n  }, {\n    key: \"cleanupTouchListeners\",\n    value: function cleanupTouchListeners() {\n      var element = this.props.element;\n\n      if (element) {\n        element.removeEventListener('touchstart', this.handleSwipeStart);\n        element.removeEventListener('touchmove', this.handleSwipeMove);\n        element.removeEventListener('touchend', this.handleSwipeEnd);\n      }\n    }\n  }, {\n    key: \"setupMouseListeners\",\n    value: function setupMouseListeners() {\n      var _this$props2 = this.props,\n          element = _this$props2.element,\n          mouseTrackingEnabled = _this$props2.mouseTrackingEnabled;\n\n      if (element && mouseTrackingEnabled) {\n        element.addEventListener('mousedown', this.handleMouseDown);\n        element.addEventListener('mousemove', this.handleMouseMove);\n        element.addEventListener('mouseup', this.handleMouseUp);\n        element.addEventListener('mouseleave', this.handleMouseLeave);\n      }\n    }\n  }, {\n    key: \"cleanupMouseListeners\",\n    value: function cleanupMouseListeners() {\n      var element = this.props.element;\n\n      if (element) {\n        element.removeEventListener('mousedown', this.handleMouseDown);\n        element.removeEventListener('mousemove', this.handleMouseMove);\n        element.removeEventListener('mouseup', this.handleMouseUp);\n        element.removeEventListener('mouseleave', this.handleMouseLeave);\n      }\n    }\n  }, {\n    key: \"getPosition\",\n    value: function getPosition(e) {\n      var _this$state = this.state,\n          x = _this$state.x,\n          y = _this$state.y,\n          start = _this$state.start;\n      var rotationAngle = this.props.rotationAngle;\n      var movingPosition = Utils.calculateMovingPosition(e);\n      var rotatePosition = Utils.rotateByAngle(movingPosition, rotationAngle);\n      return Utils.calculatePosition({\n        x: x,\n        y: y,\n        start: start\n      }, rotatePosition);\n    }\n  }, {\n    key: \"handleSwipeStart\",\n    value: function handleSwipeStart(e) {\n      if (Utils.checkIsMoreThanSingleTouches(e)) return;\n      var rotationAngle = this.props.rotationAngle;\n      var movingPosition = Utils.calculateMovingPosition(e);\n\n      var _Utils$rotateByAngle = Utils.rotateByAngle(movingPosition, rotationAngle),\n          x = _Utils$rotateByAngle.x,\n          y = _Utils$rotateByAngle.y;\n\n      this.state = {\n        start: Date.now(),\n        x: x,\n        y: y,\n        isSwiping: false\n      };\n    }\n  }, {\n    key: \"handleSwipeMove\",\n    value: function handleSwipeMove(e) {\n      var _this$state2 = this.state,\n          x = _this$state2.x,\n          y = _this$state2.y;\n      if (!x || !y || Utils.checkIsMoreThanSingleTouches(e)) return;\n\n      var _this$getPosition = this.getPosition(e),\n          absX = _this$getPosition.absX,\n          absY = _this$getPosition.absY,\n          deltaX = _this$getPosition.deltaX,\n          deltaY = _this$getPosition.deltaY,\n          duration = _this$getPosition.duration;\n\n      var _this$props3 = this.props,\n          delta = _this$props3.delta,\n          onSwiping = _this$props3.onSwiping,\n          preventDefaultTouchmoveEvent = _this$props3.preventDefaultTouchmoveEvent;\n      if (e.cancelable && preventDefaultTouchmoveEvent) e.preventDefault();\n      if (absX < Number(delta) && absY < Number(delta)) return;\n      this.state.isSwiping = true;\n\n      if (onSwiping) {\n        onSwiping(e, deltaX, deltaY, absX, absY, duration);\n      }\n    }\n  }, {\n    key: \"handleSwipeEnd\",\n    value: function handleSwipeEnd(e) {\n      var _this$props4 = this.props,\n          onSwiped = _this$props4.onSwiped,\n          onTap = _this$props4.onTap;\n\n      if (this.state.isSwiping) {\n        var position = this.getPosition(e);\n        var deltaX = position.deltaX,\n            deltaY = position.deltaY,\n            absX = position.absX,\n            absY = position.absY,\n            duration = position.duration;\n        onSwiped && onSwiped(e, deltaX, deltaY, absX, absY, duration);\n      } else {\n        onTap && onTap(e);\n      }\n\n      this.state = Utils.getInitialState();\n    }\n  }, {\n    key: \"handleMouseDown\",\n    value: function handleMouseDown(e) {\n      this.handleSwipeStart(e);\n    }\n  }, {\n    key: \"handleMouseMove\",\n    value: function handleMouseMove(e) {\n      this.handleSwipeMove(e);\n    }\n  }, {\n    key: \"handleMouseUp\",\n    value: function handleMouseUp(e) {\n      this.handleSwipeEnd(e);\n    }\n  }, {\n    key: \"handleMouseLeave\",\n    value: function handleMouseLeave() {\n      var element = this.props.element;\n      var isSwiping = this.state.isSwiping;\n\n      if (element && isSwiping) {\n        element.dispatchEvent(new Event('mouseup', {\n          bubbles: true,\n          cancelable: true\n        }));\n      }\n    }\n  }]);\n\n  return VanillaSwipe;\n}();\n\nexports[\"default\"] = VanillaSwipe;","map":null,"metadata":{},"sourceType":"script"}